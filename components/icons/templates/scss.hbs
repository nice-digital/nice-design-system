{{!
This is a template for generating SCSS for our icon font.
It generates:
 - A SASS map of icon name -> codepoint
 - A function for getting a codepoint from a name
 - A mixin
 - A BEM style class for each icon
}}
////
/// @group Icons
////

/* This is a generated SCSS file. Do not edit manually */

/* sass-lint:disable-all */
/* stylelint-disable */

// Cache busting random querystring
${{ name }}-no-cache: random(999999999);

/// Base path for loading font files
/// Override this in your application if your path differs.
/// E.g. if you want to replace it off a CDN you could change this to 'http://cdn.com/fonts/'
${{ name }}-base-path: '/fonts' !default;

/// Map of icon name to codepoint.
/// This map avoids the use of 'magic strings' for codepoints throught SASS code. The map is usually not used directly - use the nice-icon function/mixin instead.
/// Please note - the values for codepoints are not fixed and may change each time the font is re-generated.
{{# each codepoints }}
/// @prop {string} {{ @key }} [{{ codepoint this }}] - <span class="icon icon--{{ @key }}" aria-hidden="true"></span>
{{/ each }}
${{ name }}: (
{{# each codepoints }}
    "{{ @key }}": "\\{{ codepoint this }}",
{{/ each }}
);

/// Base styles required for an icon including font family etc
/// @example
///   .test {
///     @include {{ name }}-base;
///
///     &:before {
///       content: nice-icon(search);
///     }
///   }
@mixin {{ name }}-base {
  display: inline-block;
  font-family: '{{ name }}';
  font-style: normal;
  font-weight: normal !important;
  line-height: 1;
  text-decoration: inherit;
  text-rendering: auto;
  text-transform: none;
  vertical-align: baseline;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/// Applies the required styles for the given icon
/// including the codepoint.
/// @param {string} $icon - The name of the icon
/// @throws Error when the given icon doesn't exist
/// @example
///   .search-icon {
///     @include nice-icon(search);
///   }
@mixin nice-icon($icon) {
  @if map-has-key(${{ name }}, $icon) {
    @include {{ name }}-base;
    content: nice-icon($icon);
  } @else {
    @error 'Icons with name #{ $icon } could not be found in the ${{ name }} map';
  }
}

/// Function for getting the codepoint for a given icon, for use
/// within the `content` property of psuedo elements.
/// @example
///   .test {
///     @include {{ name }}-base;
///
///     &:before {
///       content: nice-icon(search);
///     }
///   }
@function nice-icon($icon) {
  @if map-has-key(${{ name }}, $icon) {
    $icon-code: map-get(${{ name }}, $icon);
    @return unquote('\'#{ $icon-code }\'');
  } @else {
    @error 'Icons with name #{ $icon } could not be found in the ${{ name }} map';
  }
}

@font-face {
  font-family: '{{ name }}';
  src: url(${{ name }}-base-path + "{{ name }}.woff?" + ${{ name }}-no-cache) format("woff"),
    url(${{ name }}-base-path + "{{ name }}.woff2?" + ${{ name }}-no-cache) format("woff2");
}

svg.icon {
  display: inline-block;
  font-style: normal;
  font-weight: normal;
  height: 1em;
  line-height: 1;
  text-decoration: inherit;
  text-rendering: auto;
  text-transform: none;
  vertical-align: baseline;
  width: 1em;
}

/// Class for rendering an icon.
/// Use with a named modifier for an icon.
/// @example
///   <span class="icon icon--search" aria-hidden="true"></span>
.icon[class*='icon--'] {
  @include {{ name }}-base;

  &:before {
    display: block;
  }
}

@each $icon, $code in ${{ name }} {
  .icon--#{ $icon }:before {
    content: nice-icon($icon);
  }
}
