////
/// @group grid
////

@import '~@nice-digital/nds-core/scss/core';

/// Grid mixin for applying to custom classes when creating a custom component
/// and creating 'semantic' (sensible) class names.
///
/// @param {boolean} $reverse [false] Whether the grid items flow the opposite way to their natural source order
/// @param {boolean} $gutterless [false] Whether the grid has no spacing
/// @param {boolean} $compact [false] Whether the grid has compact spacing
/// @param {boolean} $loose [false] Whether the grid has loose spacing
/// @param {boolean} $right [false] Whether to render items from the right instead of the left
/// @param {boolean} $center [false] Whether the grid's items are centrally aligned horizontally
/// @param {boolean} $debug [false] Whether to put a highlight round the grid for debugging
/// @require {mixin} grid-reverse
/// @require {mixin} grid-gutterless
/// @require {mixin} grid-right
/// @require {mixin} grid-center
/// @require {mixin} grid-debug
/// @example scss SCSS usage
///   .test {
///     @include nds-grid($compact: true);
///
///     @include nds-element('item') {
///       @include nds-grid-item;
///       background: red;
///       width: 100%;
///     }
///
///     @include mq($from: md) {
///       @include nds-element('item') {
///         background: green;
///         width: percentage(3 / 12);
///       }
///     }
///   }
/// @example html HTML usage
///   <div class="test">
///     <div class="test__item">item</div>
///   </div>
/// @since 0.1.0
@mixin nds-grid(
  $reverse: false,
  $gutterless: false,
  $compact: false,
  $loose: false,
  $right: false,
  $center: false,
  $debug: false
) {
  letter-spacing: -0.31em; // Remove whitespace caused by `inline-block` elements
  list-style: none; // Allow the grid system to be used on lists.
  margin: 0; // Remove any margins that might affect the grid system.
  margin-left: -$nds-grid-gutter; // Apply a negative `margin-left` to negate the columnsâ€™ gutters.
  padding: 0; // Remove any paddings that might affect the grid system.

  @if $reverse {
    @include nds-grid-reverse;
  }

  @if $gutterless {
    @include nds-grid-gutterless;
  }

  @if $compact {
    @include nds-grid-compact;
  }

  @if $loose {
    @include nds-grid-loose;
  }

  @if $right {
    @include nds-grid-right;
  }

  @if $center {
    @include nds-grid-center;
  }

  @if $debug {
    @include nds-grid-debug;
  }
}

/// Reversed grids allow you to structure your source in the opposite order to how
/// your rendered layout will appear
/// @since 0.1.0
@mixin nds-grid-reverse {
  direction: rtl;
  text-align: left;
}

/// Gutterless grids have all the properties of regular grids, minus any spacing
/// @see grid-item-gutterless
/// @since 0.1.0
@mixin nds-grid-gutterless {
  margin-left: 0;
}

/// Compact grids have a smaller gutter
/// @see grid-item-compact
/// @since 0.2.10
@mixin nds-grid-compact {
  margin-left: -$nds-grid-gutter-compact;
}

/// Loose grids have a larger gutter
/// @see grid-item-compact
/// @since 0.2.10
@mixin nds-grid-loose {
  margin-left: -$nds-grid-gutter-loose;
}

/// Align the entire grid to the right
/// @since 0.1.0
@mixin nds-grid-right {
  text-align: right;
}

/// Centered grids align grid items centrally without needing to use push or pull classes
/// @since 0.1.0
@mixin nds-grid-center {
  text-align: center;
}

/// Debug a grid by putting a highlight round it
/// @see grid-item-debug
/// @since 0.1.0
@mixin nds-grid-debug {
  outline: rem($nds-spacing-xx-small) dashed red;
  outline-offset: rem($nds-spacing-x-small);
}

// Helper mixin for outputting breakpoints within a custom grid item.
@mixin _grid-item-breakpoint($bp, $bp-name) {
  @if $bp {
    @include mq($from: $bp-name) {
      @if is-integer($bp) {
        width: percentage($bp / 12);
      } @else if is-map($bp) {
        $cols: map-get($bp, cols);
        $push: map-get($bp, push);
        $pull: map-get($bp, pull);
        width: percentage($cols / 12);
        @if $push {
          left: percentage($push / 12);
        }
        @if $pull {
          right: percentage($pull / 12);
        }
      } @else {
        @error '$bp must be an integer or a map';
      }
    }
  }
}

/// Grid item mixin. Used in tandem with the `grid` mixin for creating semantic grid
/// classes within custom componenents.
/// @param {Number} $columns [12] The number of columns (1-12) to fill on mobile
/// @param {Number} $push [false] The number of columns (1-12) to push right
/// @param {Number} $push [false] The number of columns (1-12) to pull left
/// @param {boolean} $gutterless [false] Set to `true` to remove the spacing between grid items.
/// @param {boolean} $compact [false] Whether the grid has compact spacing
/// @param {boolean} $loose [false] Whether the grid has loose spacing
/// @param {boolean} $middle [false] Whether the grid item is vertically aligned to the middle
/// @param {boolean} $bottom [false] Whether the grid item is vertically aligned to the bottom
/// @param {boolean} $debug [false] Whether to put a highlight round the grid item for debugging
/// @param {Number | Map} $xs [false] The number of columns (1-12) to fill from xs breakpoint upwards, or a map with cols, push and pull
/// @param {Number | Map} $sm [false] The number of columns (1-12) to fill from sm breakpoint upwards, or a map with cols, push and pull
/// @param {Number | Map} $md [false] The number of columns (1-12) to fill from md breakpoint upwards, or a map with cols, push and pull
/// @param {Number | Map} $lg [false] The number of columns (1-12) to fill from lg breakpoint upwards, or a map with cols, push and pull
/// @param {Number | Map} $xl [false] The number of columns (1-12) to fill from xl breakpoint upwards, or a map with cols, push and pull
/// @require {mixin} grid-item-gutterless
/// @require {mixin} grid-item-compact
/// @require {mixin} grid-item-loose
/// @require {mixin} grid-item-middle
/// @require {mixin} grid-item-bottom
/// @require {mixin} grid-item-debug
/// @example scss
///   .test {
///     @include nds-grid-item(12, $md: 8, $lg: (cols: 7, push: 1), $loose: true);
///   }
/// @since 0.1.0
@mixin nds-grid-item(
  $columns: 12,
  $push: false,
  $pull: false,
  $gutterless: false,
  $compact: false,
  $loose: false,
  $middle: false,
  $bottom: false,
  $debug: false,
  $xs: false,
  $sm: false,
  $md: false,
  $lg: false,
  $xl: false
) {
  @include _grid-item-breakpoint($xs, xs);
  @include _grid-item-breakpoint($sm, sm);
  @include _grid-item-breakpoint($md, md);
  @include _grid-item-breakpoint($lg, lg);
  @include _grid-item-breakpoint($xl, xl);
  box-sizing: border-box;
  direction: ltr;
  display: inline-block;
  letter-spacing: normal;
  padding-left: $nds-grid-gutter;
  position: relative;
  text-align: left;
  vertical-align: top;
  width: percentage($columns / 12);
  word-spacing: normal;

  @if $push {
    left: percentage($push / 12);
  }

  @if $pull {
    right: percentage($pull / 12);
  }

  @if $gutterless {
    @include nds-grid-item-gutterless;
  }

  @if $compact {
    @include nds-grid-item-compact;
  }

  @if $loose {
    @include nds-grid-item-loose;
  }

  @if $middle {
    @include nds-grid-item-middle;
  }

  @if $bottom {
    @include nds-grid-item-bottom;
  }
}

/// Gutterless grids have all the properties of regular grids, minus any spacing.
/// @since 0.1.0
@mixin nds-grid-item-gutterless {
  padding-left: 0;
}

/// Compact grid item with a smaller gutter
/// @since 0.2.10
@mixin nds-grid-item-compact {
  padding-left: $nds-grid-gutter-compact;
}

/// Loose grid item with a larger gutter
/// @since 0.2.10
@mixin nds-grid-item-loose {
  padding-left: $nds-grid-gutter-loose;
}

/// Align grid cell vertically to the middle
/// @since 0.1.0
@mixin nds-grid-item-middle {
  vertical-align: middle;
}

/// Align grid cell vertically to the bottom
/// @since 0.1.0
@mixin nds-grid-item-bottom {
  vertical-align: bottom;
}

/// Debug a grid item by putting a highlight round it
/// @see grid-debug
/// @since 0.1.0
@mixin nds-grid-item-debug {
  outline: rem($nds-spacing-xx-small) dashed blue;
}

@mixin nds-generate-grid-classes($breakpoint: null) {
  $prefix: if($breakpoint, $breakpoint + ':', '');

  // Width classes
  @for $index from 1 through 12 {
    [data-g~='#{ $prefix }#{ $index }'] {
      width: percentage($index / 12);
    }
  }

  // Push/ pull classes
  @for $index from 0 through 12 {
    [data-g~='#{ $prefix }push:#{ $index }'] {
      left: percentage($index / 12);
    }

    [data-g~='#{ $prefix }pull:#{ $index }'] {
      right: percentage($index / 12);
    }
  }
}
