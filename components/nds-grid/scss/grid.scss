@import '~@nice-digital/nds-core/scss/core';

////
/// @group grid
////

@import 'grid-settings';

/// Container, used as a wrapper around sections within a page.
/// Usually used to house grids.
///
/// @example
///   <div class="container">
///     <div class="grid">
///     </div>
///   </div>
/// @since 0.1.0
.container {
  @include nds-container;
  &--full {
    max-width: 100%;
    padding: 0 2%;
    width: auto;
  }
}

/// Grid class for the grid wrapper. Expects direct children to be `[data-g]`
/// grid items. Use modifiers to affect grid behaviour as shown below:
///
/// Modifiers:
///   - `rev` - Reverses the grid direction from natural source order
///   - `equal-height` - Sets children of grid items to fill the vertical space with 100% height
///   - `gutterless` - Removes spacing and gutters from the grid
///   - `compact` - Uses tighter spacing and gutters
///   - `loose` - Uses looser spacing and gutters
///   - `right` - Right aligned grid items
///   - `center` - Horizontally center aligned grid items
///   - `middle` - Vertically middle aligned grid items
///   - `bottom` - Bottom aligned grid items
///   - `debug` - Adds outlines for debugging grids and grid items
///
/// @example html
///   <div class="grid">
///     <div data-g="12 xs:6 md:4 lg:3 xl:2">Grid item</div>
///   </div>
.grid {
  --nds-grid-gutter: #{$nds-grid-gutter};
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  list-style: none; // Allow the grid system to be used on lists.
  margin: 0 -#{$nds-grid-gutter / 2};
  max-width: none; // To override the 66ch max width on lists
  padding: 0; // Remove any paddings that might affect the grid system.
  width: calc(100% + #{$nds-grid-gutter});

  // Fallback to fixed gutter grid in IE11, but use CSS vars where supported.
  // IE11 doesn't support custom properties: https://caniuse.com/css-variables
  @supports ((--a: 0)) {
    margin: 0 calc(var(--nds-grid-gutter) / -2);
    width: calc(100% + var(--nds-grid-gutter));
  }

  &--rev {
    flex-direction: row-reverse;
  }

  &--gutterless {
    --nds-grid-gutter: #{0rem}; // Used in calc so needs units
  }

  &--compact {
    --nds-grid-gutter: #{$nds-grid-gutter-compact};
  }

  &--loose {
    --nds-grid-gutter: #{$nds-grid-gutter-loose};
  }

  &--right {
    justify-content: flex-end;
  }

  &--center {
    justify-content: center;
  }

  &--middle {
    align-items: center;
  }

  &--bottom {
    align-items: flex-end;
  }

  &--equal-height > [data-g] > * {
    height: 100%;
  }

  // Defensive warning for grids with children that aren't items
  > :not([data-g]) {
    --error: 'Grids (`.grid`) should only have grid items (`[data-g]`) as direct children';
    background: $nds-colour-error-background;
    cursor: help;
    outline: rem($nds-spacing-x-small) solid $nds-colour-error;
  }

  .debug-grid &,
  &--debug,
  .grid--debug & {
    outline: rem($nds-spacing-xx-small) dashed red;
    outline-offset: rem($nds-spacing-x-small);
  }
}

/// Grid item default selector.
/// Use within a `.grid`.
/// Use the value of the data attribute to specify the grid item widths
/// mobile first. E.g "n w:m" where *n* and *m* are the number of columns and *w*
/// is the name of the breakpoint.
///
/// @example html HTML usage
///   <div class="grid">
///     <div data-g="12 xs:6 md:4 lg:3 xl:2">Grid item</div>
///     <div data-g="12 xs:6 md:4 lg:3 xl:2">Grid item</div>
///     <div data-g="12 xs:6 md:4 lg:3 xl:2">Grid item</div>
///     <div data-g="12 xs:6 md:4 lg:3 xl:2">Grid item</div>
///   </div>
[data-g] {
  // Auto flex-basis with separate width property for IE11 because of https://github.com/philipwalton/flexbugs#flexbug-8
  flex: 0 0 auto;
  margin: 0 #{$nds-grid-gutter / 2};
  position: relative;
  // Fixed gutters fallback for IE11, due to lack of custom property support:
  width: calc(100% - #{$nds-grid-gutter});

  @supports ((--a: 0)) {
    --grid-item-width: 100%;
    margin: 0 calc(var(--nds-grid-gutter) / 2) !important;
    // Slightly hacky 0.1px because of subpixel rounding e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=1323735
    width: calc(
      var(--grid-item-width) - var(--nds-grid-gutter) - 0.1px
    ) !important;
  }

  // Defensive warning for grid items not directly inside grids
  // See https://github.com/nice-digital/nice-design-system/issues/73
  :not(.grid) > & {
    --error: 'Put grid items (`[data-g]`) directly inside a `.grid`';
    background: $nds-colour-error-background;
    cursor: help;
    outline: rem($nds-spacing-x-small) solid $nds-colour-error;
  }

  // Warning for single grid items within a grid
  &:only-child {
    --warn: 'Did you mean to just have a single item within a grid?';
  }

  .debug-grid &,
  .grid--debug & {
    outline: rem($nds-spacing-xx-small) dashed blue;
  }
}

@mixin _nds-generate-grid-items($prefix: null) {
  $prefix: if($prefix, $prefix + ':', '');

  @for $index from 1 through 12 {
    [data-g~='#{ $prefix }#{ $index }'] {
      --grid-item-width: #{percentage($index / 12)};
      // IE 11 fallback, due to lack of custom property support:
      width: calc(#{percentage($index / 12)} - #{$nds-grid-gutter});
    }
  }

  @for $index from 0 through 12 {
    [data-g~='#{ $prefix }push:#{ $index }'] {
      left: percentage($index / 12);
    }
    [data-g~='#{ $prefix }pull:#{ $index }'] {
      right: percentage($index / 12);
    }
  }
}

@include _nds-generate-grid-items;

@if $nds-responsive {
  @each $brkpnt-key, $brkpnt-value in $mq-breakpoints {
    @include mq($from: $brkpnt-key) {
      @include _nds-generate-grid-items($brkpnt-key);
    }
  }
}
