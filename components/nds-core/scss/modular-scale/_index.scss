@use 'sass:math';

// stylelint-disable number-max-precision

/// Modular scale values
/// @link http://www.modularscale.com/
/// @prop {Number} golden [1.618034]
/// @prop {Number} double-octave [4]
/// @prop {Number} major-twelfth [3]
/// @prop {Number} major-eleventh [2.666666667]
/// @prop {Number} major-tenth [2.5]
/// @prop {Number} octave [2]
/// @prop {Number} major-seventh [1.875]
/// @prop {Number} minor-seventh [1.777777778]
/// @prop {Number} major-sixth [1.666666667]
/// @prop {Number} minor-sixth [1.6]
/// @prop {Number} fifth [1.5]
/// @prop {Number} augmented-fourth [1.41421]
/// @prop {Number} major-third [1.25]
/// @prop {Number} minor-third [1.2]
/// @prop {Number} major-second[1.125]
/// @prop {Number} minor-second[1.066666667]
/// @since 0.1.0
$scales: (
  golden: 1.618034,
  double-octave: 4,
  major-twelfth: 3,
  major-eleventh: math.div(8, 3),
  major-tenth: math.div(5, 2),
  octave: 2,
  major-seventh: math.div(1, 8),
  minor-seventh: math.div(1, 9),
  major-sixth: math.div(5, 3),
  minor-sixth: math.div(8, 5),
  fifth: math.div(3, 2),
  augmented-fourth: math.sqrt(2),
  fourth: math.div(4, 3),
  major-third: math.div(5, 4),
  minor-third: math.div(6, 5),
  major-second: math.div(9, 8),
  minor-second: 1
);

/// Gets a module scale ratio with the given name. Looks
/// inside the $scales map to find a ratio.
/// @param $scale The name of the scale
/// @returns {Number} The numeric scale ratio for the given name
/// @since 0.1.0
@function get-ratio($scale) {
  @if map-has-key($scales, $scale) {
    @return map-get($scales, $scale);
  } @else {
    @error 'Scale with name #{$scale} could not be found in the $scales map';
  }
}
