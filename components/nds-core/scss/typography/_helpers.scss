@use 'sass:map';
@use 'settings' as typography-settings;
@use '../spacing';
@use '../colours';
@use '../utils';

////
/// @group Typography
////

/// Gets a font family from the `$font-families` map, given a name
/// @param {String} $stack The stack name e.g. sans, serif or mono
/// @since 0.1.0
@function get-font-family($stack) {
  $result: map.get(typography-settings.$font-families, $stack);
  @return unquote($result);
}

/// Gets a numeric scale
/// @param $scale {Integer|Name} The integer ratio or named font-size.
/// @since 0.1.0
@function get-scale-integer($scale) {
  @if map-has-key(typography-settings.$named-font-sizes, $scale) {
    @return map.get(typography-settings.$named-font-sizes, $scale);
  } @else if is-integer($scale) {
    @return $scale;
  }

  @error '`$scale` must either be an integer or exist as a named font size in `$named-font-sizes`';
}

/// Gets a numeric font size (in px) from a given scale multiplier.
/// Usually not used directly - the font-size or font mixin is usually used instead.
/// @param $scale {Integer|Name} The integer ratio or named font-size.
/// @return {Number} Numeric font size (in px)
/// @example
///   $font-size: get-font-size(2)
/// @example
///   $font-size: get-font-size(h1)
/// @since 0.1.0
@function get-font-size($scale) {
  $scale-integer: get-scale-integer($scale);
  $font-map: map.get(typography-settings.$font-sizes, $scale-integer);
  @return map.get($font-map, fs);
}

/// Gets a numeric line height (in px) from a given scale multiplier.
/// Usually not used directly - the font-size or font mixin is usually used instead.
/// @param $scale {Integer|Name} The integer ratio or named font-size.
/// @return {Number} Numeric line-height (in px)
/// @example
///   $line-height: get-line-height(2)
/// @example
///   $line-height: get-line-height(h1)
/// @since 0.1.0
@function get-line-height($scale) {
  $scale-integer: get-scale-integer($scale);
  $font-map: map.get(typography-settings.$font-sizes, $scale-integer);
  @return map.get($font-map, lh);
}

/// Applies font size and line-height for the given scale.
/// @param $scale {Integer|Name} The integer ratio or named font-size.
/// @param $important {Boolean} Whether to add an important declaration to the CSS rules.
/// @example
///   .test {
///     @include font-size(-2);
///   }
/// @example
///   .test {
///     @include font-size(h1, true);
///   }
/// @since 0.1.0
@mixin font-size($scale: 0, $important: false) {
  $font-size: get-font-size($scale);
  $line-height: get-line-height($scale);

  @if $important {
    font-size: utils.rem($font-size) !important;
    line-height: utils.rem($line-height) !important;
  } @else {
    font-size: utils.rem($font-size);
    line-height: utils.rem($line-height);
  }
}

/// Nice font: includes font size, line height, and margins.
/// @param $scale {Integer|Name} The integer ratio or named font-size.
/// @param $important {Boolean} Whether to add an important declaration to the CSS rules.
/// @example
///   .test {
///     @include font(3);
///   }
/// @example
///   .test {
///     @include font(h1, true);
///   }
/// @since 0.1.0
@mixin font($scale, $important: false) {
  $scale-integer: get-scale-integer($scale);
  $font-map: map.get(typography-settings.$font-sizes, $scale-integer);
  @include font-size($scale, $important);

  @if $important {
    margin-bottom: utils.rem(map.get($font-map, mb)) !important;
    margin-top: utils.rem(map.get($font-map, mt)) !important;
  } @else {
    margin-bottom: utils.rem(map.get($font-map, mb));
    margin-top: utils.rem(map.get($font-map, mt));
  }
}

/// Default paragraph style
/// @since 0.5.2
@mixin p {
  @include font(p);
  font-feature-settings: 'kern', 'onum', 'liga';
  font-weight: normal;
  max-width: 66ch;
}

/// Lead paragraph style
/// @since 0.2.12
@mixin lead {
  @include font(lead);
  font-weight: normal;
  max-width: 66ch;
}

/// Base list style
/// @since 0.1.0
@mixin list {
  font-feature-settings: 'kern', 'onum', 'liga';
  margin-left: utils.rem(spacing.$medium);
  max-width: 66ch;
  padding: 0;
}

/// Text truncate
/// Requires inline-block or block for proper styling
/// @since 0.1.0
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/// Set and element to display as block and align
/// centrally via auto left/right margins
/// @since 0.1.0
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// TODO: default-error-style probably belongs elsewhere?

/// The highlight style used for elements like inputs and textareas
/// if there's an error on the field
/// @param {Boolean} $rounded whether to use box shadow for border (outline can't be styled to have radius corners)
/// @output default styling for form elements in an errored state
/// @since 1.0
@mixin default-error-style($rounded: false) {
  @if $rounded {
    box-shadow: 0 0 0 utils.rem(spacing.$x-small) colours.$error;
    outline: spacing.$x-small solid transparent;
    outline-offset: spacing.$x-small;
  } @else {
    outline: utils.rem(spacing.$x-small) solid colours.$error;
  }
}
