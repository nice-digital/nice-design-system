<%
// This is a template for generating SASS for our icon font.
// It generates:
//  - A SASS map of icon name -> codepoint
//  - A function for getting a codepoint from a name
//  - A mixin
//  - A BEM style class for each icon
%>

/* Generated by grunt-webfont */

<%
// See https://css-tricks.com/snippets/css/using-font-face/#article-header-id-0
// for cross-browser font face rule
%>

$${ fontBaseName }-no-cache: random(999999999);

@font-face {
  font-family: "${ fontFamilyName }";
  font-style: normal;
  font-weight: normal;
  src: ${ fontSrc1.replace(new RegExp(hash + "\"", "g"), "\" + $" + fontBaseName + "-no-cache") };
  src: ${ fontSrc2.replace(new RegExp(hash + "\"", "g"), "\" + $" + fontBaseName + "-no-cache").replace(new RegExp(hash + "#", "g"), "\" + $" + fontBaseName + "-no-cache + \"#") };
}

// Map of icon name to codepoint
$nice-icons: (
  <% _.forEach(glyphs, function(glyph, index) { %>${ glyph }: "${ codepoints[index] }"<% if (index < glyphs.length - 1) { %>,
  <% } %><% }); %>
) !default;

@mixin icon-base {
  display: inline-block;
  font-family: "${ fontFamilyName }";
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  speak: none;
  text-decoration: inherit;
  text-rendering: auto;
  text-transform: none;
  vertical-align: baseline;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin nice-icon($icon) {
  @if map-has-key($nice-icons, $icon) {
    @include icon-base;
    content: nice-icon($icon);
  } @else {
    @error 'Icons with name #{ $icon } could not be found in the $nice-icons map';
  }
}

@function nice-icon($icon) {
  @if map-has-key($nice-icons, $icon) {
    $icon-code: map-get($nice-icons, $icon);
    @return unquote('\'\\#{ $icon-code }\'');
  } @else {
    @error 'Icons with name #{ $icon } could not be found in the $nice-icons map';
  }
}

.icon {
  @include icon-base;

  &:before {
    display: block;
  }

  @each $icon, $code in $nice-icons {
    &--#{ $icon }:before {
      content: nice-icon($icon);
    }
  }
}
