////
/// @group colors
////

/// Possible tones that can be used for colour mapping
/// @see get-colour
$tones: (
  xx-dark: (
    function: darken,
    args: 40%
  ),
  x-dark: (
    function: darken,
    args: 30%
  ),
  dark: (
    function: darken,
    args: 20%
  ),
  mid-dark: (
    function: darken,
    args: 10%
  ),
  base,
  mid-light: (
    function: lighten,
    args: 10%
  ),
  light: (
    function: lighten,
    args: 20%
  ),
  x-light: (
    function: lighten,
    args: 30%
  ),
  xx-light: (
    function: lighten,
    args: 40%
  )
);

/// Applies a tone to the given colour
/// @param $colour [Colour] The colour to which to apply the tone
/// @param $tone [Map] The tone, one of the values from the $tones map
/// @returns {Colour} The toned colour
@function apply-tone($colour, $tone) {
  @if map-has-key($tones, $tone) {
    $this-tone: map-get($tones, $tone);
    $function: map-get($this-tone, function);

    $args: ();
    @if map-get($this-tone, args) {
      $args: join($args, map-get($this-tone, args));
    }
    @return call($function, $colour, $args...);
  }

  @error 'Invalid `$tone`: #{$tone}. Must be one of $tones.';
}

// Extremes
$black: #000;
$white: #fff;

/// The base colour for grey
$colour-base-grey: #777;

/// The base colour for blue
$colour-base-blue: #2f577a;

/// The base colour for green
$colour-base-green: #4caf50;

/// The base colour for orange
$colour-base-orange: #f5b805;

/// The base colour for pink
$colour-base-pink: #d5367f;

/// The base colour for purple
$colour-base-purple: #82176f;

/// The base colour for red
$colour-base-red: #f00;

/// Grey colour palette
/// @prop {Color} xx-light [#eee] Extra, extra light grey
/// @prop {Color} x-light [#ddd] Extra light grey
/// @prop {Color} light [#bbb] Light grey
/// @prop {Color} mid-light [#999] Mid-light grey
/// @prop {Color} base [$colour-base-grey] Base grey
/// @prop {Color} mid-dark [#555] Mid-dark grey
/// @prop {Color} dark [#333] Dark grey
/// @prop {Color} x-dark [#111] Extra dark grey
$palette-grey: (
  xx-light: #eee,
  x-light: #ddd,
  light: #bbb,
  mid-light: #999,
  base: $colour-base-grey,
  mid-dark: #555,
  dark: #333,
  x-dark: #111
);

/// Blue colour palette
/// @prop {Color} x-light [#66c2ff] Extra-light blue
/// @prop {Color} light [#1167b7] Light blue
/// @prop {Color} base [$colour-base-blue] Base blue
/// @prop {Color} dark [#264965] Dark blue
$palette-blue: (
  x-light: #66c2ff,
  light: #1167b7,
  base: $colour-base-blue,
  dark: #264965
);

/// Green colour palette
/// @prop {Color} xx-light [#c8e6c9] Extra extra light green
/// @prop {Color} x-light [#a5d6a7] Extra light green
/// @prop {Color} light [#81c784] Light green
/// @prop {Color} mid-light [#66bb6a] Mid-light green
/// @prop {Color} base [$colour-base-green] Base green
/// @prop {Color} mid-dark [#43a047] Mid-dark green
/// @prop {Color} dark [#388e3c] Dark green
/// @prop {Color} x-dark [#2e7d32] Extra dark green
/// @prop {Color} xx-dark [#1b5e20] Extra extra dark green
$palette-green: (
  xx-light: #c8e6c9,
  x-light: #a5d6a7,
  light: #81c784,
  mid-light: #66bb6a,
  base: $colour-base-green,
  mid-dark: #43a047,
  dark: #388e3c,
  x-dark: #2e7d32,
  xx-dark: #1b5e20
);

/// Orange palette
/// @prop {Color} base [$colour-base-orange] Base orange
$palette-orange: (
  base: $colour-base-orange
);

/// Pink palette
/// @prop {Color} light [#fef7f7] Light pink
/// @prop {Color} base [$colour-base-pink] Base pink
$palette-pink: (
  light: #fef7f7,
  base: $colour-base-pink
);

/// Purple colour palette
/// @prop {Color} base [$colour-base-purple] Base purple colour
$palette-purple: (
  base: $colour-base-purple
);

/// Red palette
/// @prop {Color} x-light [#faa] Extra light red
/// @prop {Color} light [#ff8080] Light red
/// @prop {Color} mid-light [#f55] Mid-light red
/// @prop {Color} base [$colour-base-red] Base red
/// @prop {Color} mid-dark [#d40000] Mid-dark red
/// @prop {Color} dark [#a00] Dark red
/// @prop {Color} x-dark [#800000] Extra dark red
$palette-red: (
  x-light: #faa,
  light: #ff8080,
  mid-light: #f55,
  base: $colour-base-red,
  mid-dark: #d40000,
  dark: #a00,
  x-dark: #800000
);

/// A map of colour name -> palette.
/// The keys are used to get a colour via the `get-colour` function.
/// @see get-colour
/// @prop {Map} purple [$palette-purple] Purple colour palette
/// @prop {Map} grey [$palette-grey] Grey colour palette
/// @prop {Map} green [$palette-green] Green colour palette
/// @prop {Map} blue [$palette-blue] Blue colour palette
/// @prop {Map} orange [$palette-orange] Orange colour palette
/// @prop {Map} red [$palette-red] Red colour palette
/// @prop {Map} pink [$palette-pink] Pink colour palette
$palettes: (
  purple: $palette-purple,
  grey: $palette-grey,
  green: $palette-green,
  blue: $palette-blue,
  orange: $palette-orange,
  red: $palette-red,
  pink: $palette-pink
);

/// Gets a colour value from a given name and optional tone.
/// If the tone variant isn't explicitly declared in the `$palettes` map
/// then the function from the `$tones` is used as a fallback.
/// @param {String} $palette The colour palette to get, e.g. red
/// @param {String} $tone The optional tone variant, one of the `$tones` values
/// @see $tones
/// @see $palettes
/// @link http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/ Colour map structure inspired from Erskine Design
/// @link https://www.sitepoint.com/managing-color-values-with-sass/ Function borrowed from SitePoint
@function get-colour($palette, $tone: 'base') {
  @if map-has-key($palettes, $palette) {

    $colour: map-get($palettes, $palette);

    @if map-has-key($colour, $tone) {
      @return map-get($colour, $tone);
    }

    @warn 'Tone `#{$tone}` could not be found in colour `#{$palette}`. Auto-toning instead';
    @return apply-tone(map-get($colour, base), $tone);
  }

  @error 'Palette `#{$palette}` could not be found';
}


//## Semantic colour names

/// Page background colour
$colour-page: $white;
/// Link text colour
$colour-link: get-colour(blue, light);
/// Link hover colour
$colour-link-hover: get-colour(blue, x-light);
/// Link visited colour
$colour-link-visited: get-colour(purple);
// $link-active-colour: $light-blue;
/// Focus colour
$colour-focus: get-colour(orange);
/// Standard text colour
$colour-text: get-colour(grey, dark);
/// Borders, seperators, rules, keylines etc.
$colour-border: get-colour(grey, light);
// Panels, tabs etc
$colour-panel: get-colour(grey, x-light);
// Table stripes etc.
// $highlight-colour: $grey-4;
/// Alpha badges and banners
$colour-alpha: get-colour(pink);
/// Beta badges and banners
$colour-beta: get-colour(orange);
/// Live badges and banners
$colour-live: get-colour(green);
/// Error text and border colour
$colour-error: get-colour(red);
/// Error background colour
$colour-error-background: get-colour(pink, x-light);
/// BNF brand colour
$colour-bnf: $colour-base-purple;
